{
    "window.commandCenter": 1,
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    "git.autofetch": true,

    // Files
    "files.autoSave": "onFocusChange",
    "files.insertFinalNewline": true,
    "files.trimFinalNewlines": true,
    "files.trimTrailingWhitespace": true,

    // VIM
    "vim.leader": "<space>",
    "vim.useSystemClipboard": true,
    "vim.hlsearch": true,
    "vim.visualstar": true,
    // To improve performance
    "extensions.experimental.affinity": {
        "vscodevim.vim": 1
    },
    "vim.normalModeKeyBindings": [
        // Splits
        {
            "before": ["<leader>", "v"],
            "commands": ["workbench.action.splitEditorRight"]
        },
        {
            "before": ["<leader>", "s"],
            "commands": ["workbench.action.splitEditorDown"]
        },
        // Git
        {
            "before": ["<leader>", "g", "g"],
            "commands": ["lazygit.openLazygit"]
        },
        // Clojure/Calva - REPL
        {
            "before": [",", "r", "s"],
            "commands": ["calva.jackIn"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "r", "q"],
            "commands": ["calva.jackOut"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "r", "c"],
            "commands": ["calva.connect"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "l", "r"],
            "commands": ["calva.clearReplHistory"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "l", "v"],
            "commands": ["calva.showReplWindow"],
            "when": "calva:enabled"
        },
        // Clojure/Calva - Eval
        {
            "before": [",", "e", "e"],
            "commands": ["calva.evaluateCurrentTopLevelForm"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "e", "b"],
            "commands": ["calva.loadFile"],
            "when": "calva:enabled"
        },
        // Clojure/Calva - Tests
        {
            "before": [",", "t", "t"],
            "commands": ["calva.runTestUnderCursor"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "t", "n"],
            "commands": ["calva.runNamespaceTests"],
            "when": "calva:enabled"
        },
        // Clojure/Calva - Namespace refresh
        {
            "before": [",", "r", "r"],
            "commands": ["calva.refresh"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "r", "R"],
            "commands": ["calva.refreshAll"],
            "when": "calva:enabled"
        },
        // Clojure/Calva - LSP
        {
            "before": [",", "c", "a", "m"],
            "commands": ["clojureLsp.refactor.addMissingLibspec"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "c", "n"],
            "commands": ["clojureLsp.refactor.cleanNs"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "c", "t", "f"],
            "commands": ["clojureLsp.refactor.threadFirstAll"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "c", "t", "F"],
            "commands": ["clojureLsp.refactor.threadFirst"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "c", "t", "l"],
            "commands": ["clojureLsp.refactor.threadLastAll"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "c", "t", "L"],
            "commands": ["clojureLsp.refactor.threadLast"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "c", "t", "u"],
            "commands": ["clojureLsp.refactor.unwindAll"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "c", "t", "U"],
            "commands": ["clojureLsp.refactor.unwind"],
            "when": "calva:enabled"
        },
        {
            "before": [",", "c", "f"],
            "commands": [
                "calva-fmt.alignCurrentForm",
                "calva-fmt.formatCurrentForm"
            ],
            "when": "calva:enabled"
        },
        // Clojure/Calva - Sexp
        {
            "before": ["Â®"], // option+r
            "commands": ["paredit.raiseSexp"],
            "when": "calva:enabled"
        },
        {
            "before": [">", "("],
            "commands": ["paredit.barfSexpBackward"],
            "when": "calva:enabled"
        },
        {
            "before": ["<", "("],
            "commands": ["paredit.slurpSexpBackward"],
            "when": "calva:enabled"
        },
        {
            "before": [">", ")"],
            "commands": ["paredit.slurpSexpForward"],
            "when": "calva:enabled"
        },
        {
            "before": ["<", ")"],
            "commands": ["paredit.barfSexpForward"],
            "when": "calva:enabled"
        }
    ],

    // Calva
    "calva.autoConnectRepl": true,
    "calva.autoOpenInspector": false
}
