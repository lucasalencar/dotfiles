# vim:fileencoding=utf-8:ft=conf

#: Fonts {{{

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. By default they are derived automatically, by the OSes
#: font system. Setting them manually is useful for font families that
#: have many weight variants like Book, Medium, Thick, etc. For
#: example::

#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic

font_family      Hack
bold_font        auto
italic_font      auto
bold_italic_font auto


#: Font size (in pts)
font_size 13.0

#: }}}

#: Cursor customization {{{

#: Default cursor color
cursor #cccccc

#: Choose the color of text under the cursor. If you want it rendered
#: with the background color of the cell underneath instead, use the
#: special keyword: background

cursor_text_color background

#: The cursor shape can be one of (block, beam, underline)

cursor_shape block

#: The interval (in seconds) at which to blink the cursor. Set to zero
#: to disable blinking. Note that numbers smaller than repaint_delay
#: will be limited to repaint_delay. Stop blinking cursor after the
#: specified number of seconds of keyboard inactivity. Set to zero to
#: never stop blinking.

cursor_blink_interval      0.0
cursor_stop_blinking_after 15.0

#: }}}

#: Scrollback {{{

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down resizing of the terminal and also
#: use large amounts of RAM.

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen.

scrollback_lines 5000

#: Modify the amount scrolled by the mouse wheel. Note this is only
#: used for low precision scrolling devices, not for high precision
#: scrolling on platforms such as macOS and Wayland. Use negative
#: numbers to change scroll direction.

wheel_scroll_multiplier 5.0

#: Modify the amount scrolled by a touchpad. Note this is only used
#: for high precision scrolling devices on platforms such as macOS and
#: Wayland. Use negative numbers to change scroll direction.

touch_scroll_multiplier 1.0

#: }}}

#: Mouse {{{

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

url_color #0087BD
url_style curly

#: The modifier keys to press when clicking with the mouse on URLs to
#: open the URL

open_url_modifiers kitty_mod

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.

mouse_hide_wait 1.0

#: }}}

#: Window layout {{{

#: The window margin (in pts) (blank area outside the border)

window_margin_width 1.0

#: }}}

#: Tab bar {{{

#: Which edge to show the tab bar on, top or bottom

tab_bar_edge top

#: }}}

#: Color scheme {{{

#: The foreground and background colors

foreground #dddddd
background #000000

#: The 16 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version. You can also set the remaining colors from
#: the 256 color table as color16 to color255.

#: black
# color0 #000000
# color8 #767676

#: red
# color1 #cc0403
# color9 #f2201f

#: green
# color2  #19cb00
# color10 #23fd00

#: yellow
# color3  #cecb00
# color11 #fffd00

#: blue
# color4  #0d73cc
# color12 #1a8fff

#: magenta
# color5  #cb1ed1
# color13 #fd28ff

#: cyan
# color6  #0dcdcd
# color14 #14ffff

#: white
# color7  #dddddd
# color15 #ffffff

#: }}}

#: Advanced {{{

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/index.html#sessions in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded.

# startup_session /Users/lucas/.dotfiles/kitty/startup_script

#: }}}

#: OS specific tweaks {{{

#: Use the option key as an alt key. With this set to no, kitty will
#: use the macOS native Option+Key = unicode character behavior. This
#: will break any Alt+key keyboard shortcuts in your terminal
#: programs, but you can use the macOS unicode input technique.

macos_option_as_alt yes

#: Have kitty quit when all the top-level windows are closed. By
#: default, kitty will stay running, even with no open windows, as is
#: the expected behavior on macOS.

macos_quit_when_last_window_closed no

#: Draw an extra border around the font with the given width, to
#: increase legibility at small font sizes. For example, a value of
#: 0.75 will result in rendering that looks similar to sub-pixel
#: antialiasing at common font sizes.

macos_thicken_font 0.5

#: Enable/disable custom mouse cursor for macOS that is easier to see
#: on both light and dark backgrounds. WARNING: this might make your
#: mouse cursor invisible on dual GPU machines.

# macos_custom_beam_cursor no

#: }}}

#: Keyboard shortcuts {{{

#: For a list of key names, see: GLFW keys
#: <http://www.glfw.org/docs/latest/group__keys.html>. The name to use
#: is the part after the GLFW_KEY_ prefix. For a list of modifier
#: names, see: GLFW mods
#: <http://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you should only use an XKB key
#: name for keys that are not present in the list of GLFW keys.

#: Finally, you can use raw system key codes to map keys. To see the
#: system key code for a key, start kitty with the kitty --debug-
#: keyboard option. Then kitty will output some debug text for every
#: key event. In that text look for ``native_code`` the value of that
#: becomes the key name in the shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration.

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

kitty_mod ctrl+shift

#: Font sizes {{{

map cmd+equal     change_font_size all +1.0
map cmd+minus     change_font_size all -1.0
map cmd+0         change_font_size all 0

#: }}}

#: Miscellaneous {{{

#: You can create shortcuts to clear/reset the terminal. For example::

#:     # Reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # Clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # Clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # Scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen::

#:     map ctrl+l combine : clear_terminal scroll active : send_text normal,application

# Reset the terminal
# map cmd+l clear_terminal reset active

# Clear the terminal screen by erasing all contents
# map cmd+k clear_terminal clear active

### VIM MAPPINGS

# Map tab switch to behave as MacOS standard shortcuts
map cmd+shift+] send_text all :tabnext\r
map cmd+shift+[ send_text all :tabprev\r

### TMUX MAPPINGS

map cmd+l send_text all clear\r
#map cmd+k send_text all clear\r\`:clear-history

#: }}}

# }}}
