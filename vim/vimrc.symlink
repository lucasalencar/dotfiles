" load vim-plug
call plug#begin('~/.vim/plugged')

" Languages
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-rails'
Plug 'sunaku/vim-ruby-minitest'
Plug 'chrisbra/csv.vim'
Plug 'hallison/vim-rdoc'
Plug 'cakebaker/scss-syntax.vim'
Plug 'mmalecki/vim-node.js'
Plug 'mattn/emmet-vim'
Plug 'ap/vim-css-color'
Plug 'janko-m/vim-test'

" Tools
Plug 'vim-airline/vim-airline'
Plug 'kien/ctrlp.vim'
Plug 'easymotion/vim-easymotion'
Plug 'thinca/vim-visualstar'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-endwise'
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'bronson/vim-trailing-whitespace'
Plug 'neomake/neomake'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-eunuch'
Plug 'terryma/vim-multiple-cursors'
Plug 'tmhedberg/matchit'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/switch.vim'
Plug 'junegunn/vim-easy-align'

" OBS: Creates panel switching mapping using ctrl+<direction>
" It is not necessary to add it to vimrc
Plug 'christoomey/vim-tmux-navigator'

Plug 'rking/ag.vim', { 'on': 'Ag' }
Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'
Plug 'vimwiki/vimwiki', { 'on': 'VimwikiIndex ' }

" Color schemes
Plug 'brendonrapp/smyck-vim'
Plug 'telamon/vim-color-github'
Plug 'twerth/ir_black'
Plug 'vim-scripts/molokai'
Plug 'altercation/vim-colors-solarized'

call plug#end()

" ============================================================================
""
"" Basic Setup
""

if has('vim_starting') && !has('nvim') && &compatible
  set nocompatible " Be iMproved
endif
set number            " Show line numbers
set ruler             " Show line and column number
set cursorline        " Highlights current line
set colorcolumn=80    " Highlights column 80
syntax enable         " Turn on syntax highlighting allowing local overrides

" Neovim disallow changing 'enconding' option after initialization
" see https://github.com/neovim/neovim/pull/2929 for more details
if !has('nvim')
  set encoding=utf-8  " Set default encoding to UTF-8
endif

""
"" Appearance
""

" Default theme configs
color smyck
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h15

" Remove scroll bars from macvim
set guioptions=aAce

if has("gui_running")
  " Set default transparency
  set transparency=3

  " Disable hover tooltips
  set noballooneval
  let g:netrw_nobeval = 1
endif

" Unicode symbols for airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_left_alt_sep= ''
let g:airline_left_sep = ''

""
"" Whitespace
""

set wrap linebreak nolist         " Wraps words when it reaches borders
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode
autocmd BufWritePre * :%s/\s\+$//e " Strips white spaces on save

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
                                  " off and the line continues beyond the left of the screen
""
"" Searching
""

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

""
"" Wild settings
""   Used by Ctrl-P for fuzzy finding ignoring some types of files during
""   search.
""

" Shows matches when hitting tab in a word
set wildmenu

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore librarian-chef, vagrant, test-kitchen and Berkshelf cache
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*

" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

""
"" Backup and swap files
""

set backupdir^=~/.vim/_backup//    " where to put backup files.
set directory^=~/.vim/_temp//      " where to put swap files.

if has("gui_running")
  if has("autocmd")
    " Automatically resize splits when resizing MacVim window
    autocmd VimResized * wincmd =
  endif
endif

""
"" File types
""

filetype plugin indent on " Turn on filetype plugins (:help filetype-plugin)

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType make setlocal noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
  if !exists("g:disable_markdown_autostyle")
    au FileType markdown setlocal wrap linebreak textwidth=72 nolist
  endif

  " make Python follow PEP8 for whitespace ( http://www.python.org/dev/peps/pep-0008/ )
  au FileType python setlocal tabstop=4 shiftwidth=4

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

" Save files when focus lost
if has("autocmd")
  if exists("g:autosave_on_blur")
    au FocusLost * silent! wall
  endif
endif

""
"" General Mappings (Normal, Visual, Operator-pending)
""

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" format the entire file
nnoremap <leader>fef :normal! gg=G``<CR>

" Some helpers to edit mode
" http://vimcasts.org/e/14
nmap <leader>ew :e <C-R>=expand('%:h').'/'<cr>
nmap <leader>es :sp <C-R>=expand('%:h').'/'<cr>
nmap <leader>ev :vsp <C-R>=expand('%:h').'/'<cr>
nmap <leader>et :tabe <C-R>=expand('%:h').'/'<cr>

" Swap two words
nmap <silent> gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" set text wrapping toggles
nmap <silent> <leader>[ :set invwrap<CR>:set wrap?<CR>

" Toggle hlsearch with <leader>hs
nmap <leader>] :set hlsearch! hlsearch?<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Map the arrow keys to be based on display lines, not physical lines
map <Down> gj
map <Up> gk

" Adjust viewports to the same size
map <Leader>= <C-w>=

if has("gui_macvim") && has("gui_running")
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <D-]> >gv
  vmap <D-[> <gv
  nmap <D-]> >>
  nmap <D-[> <<
  omap <D-]> >>
  omap <D-[> <<
  imap <D-]> <Esc>>>i
  imap <D-[> <Esc><<i

  " Bubble single lines
  nmap <D-Up> [e
  nmap <D-Down> ]e
  nmap <D-k> [e
  nmap <D-j> ]e
  vmap <D-Up> [egv
  vmap <D-Down> ]egv
  vmap <D-k> [egv
  vmap <D-j> ]egv

  " Map Command-# to switch tabs
  map  <D-0> 0gt
  imap <D-0> <Esc>0gt
  map  <D-1> 1gt
  imap <D-1> <Esc>1gt
  map  <D-2> 2gt
  imap <D-2> <Esc>2gt
  map  <D-3> 3gt
  imap <D-3> <Esc>3gt
  map  <D-4> 4gt
  imap <D-4> <Esc>4gt
  map  <D-5> 5gt
  imap <D-5> <Esc>5gt
  map  <D-6> 6gt
  imap <D-6> <Esc>6gt
  map  <D-7> 7gt
  imap <D-7> <Esc>7gt
  map  <D-8> 8gt
  imap <D-8> <Esc>8gt
  map  <D-9> 9gt
  imap <D-9> <Esc>9gt
else
  " These mappings using ALT works only with MacOS

  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  " ALT + ] => indent to right
  " ALT + [ => indent to left
  vmap ‘ >gv
  vmap “ <gv
  nmap ‘ >>
  nmap “ <<
  omap ‘ >>
  omap “ <<
  imap ‘ <Esc>>>i
  imap “ <Esc><<i

  " Bubble single lines
  " ALT + j => bubble down
  " ALT + k => bubble up
  nmap ˚ [e
  nmap ∆ ]e
  vmap ˚ [egv
  vmap ∆ ]egv

  " Map ALT-# to switch tabs
  " Ex: ALT + 1 => goes to tab 1
  " Ex: ALT + 2 => goes to tab 2
  map  º 0gt
  imap º <Esc>0gt
  map  ¡ 1gt
  imap ¡ <Esc>1gt
  map  ™ 2gt
  imap ™ <Esc>2gt
  map  £ 3gt
  imap £ <Esc>3gt
  map  ¢ 4gt
  imap ¢ <Esc>4gt
  map  ∞ 5gt
  imap ∞ <Esc>5gt
  map  § 6gt
  imap § <Esc>6gt
  map  ¶ 7gt
  imap ¶ <Esc>7gt
  map  • 8gt
  imap • <Esc>8gt
  map  ª 9gt
  imap ª <Esc>9gt

  " Map ALT + SHIFT + <direction> to switch tabs
  " ALT + SHIFT + [ => previous tab
  map ’ :tabnext<CR>
  " ALT SHIFT + ] => next tab
  map ” :tabprevious<CR>
endif

""
"" Command-Line Mappings
""

if has("statusline") && !&cp
  set laststatus=2  " always show the status bar
endif

""
"" Plugins mapping
""

" Ag
if has("gui_macvim") && has("gui_running")
  " Command-Shift-F on OSX
  map <D-F> :Ag<space>
else
  " <ALT-SHIFT-F> to find the whole project
  map Ï :Ag<space>
endif

" Ctrlp
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$|bower_components|node_modules',
      \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
      \ }

" NERDCommenter
if has("gui_macvim") && has("gui_running")
  map <D-/> <plug>NERDCommenterToggle<CR>
  imap <D-/> <ESC><plug>NERDCommenterToggle<CR>i
else
  " ALT + / => comments current line
  map ÷ <plug>NERDCommenterToggle
  " ALT + SHIFT + / => comments current line and goes to next one
  map ¿ <plug>NERDCommenterToggle<CR>
endif

" Disables NERDTree auto open
let g:nerdtree_tabs_open_on_gui_startup = 0
" Shortcut toggle for NerdTree
map <Leader>n <plug>NERDTreeTabsToggle<CR>

" EasyAlign
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

""
"" Neomake
""

" Run NeoMake on read and write operations
autocmd! BufReadPost,BufWritePost * Neomake

let g:neomake_error_sign = { 'text': '✖', 'texthl': 'NeomakeErrorSign' }
let g:neomake_warning_sign = { 'text': '⚠', 'texthl': 'NeomakeWarningSign' }
let g:neomake_message_sign = { 'text': '➤', 'texthl': 'NeomakeMessageSign' }
let g:neomake_info_sign = { 'text': 'ℹ', 'texthl': 'NeomakeInfoSign' }

""
"" vim-tmux-navigator
""

" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

""
"" Panels shortcuts
""

" New vertical pane, moving to new pane
nnoremap <leader>v <C-w>v<C-w>l
" New horizontal pane, moving to new pane
nnoremap <leader>s <C-w>s<C-w>j

" Formats JSON files
map <leader>j :%!python -m json.tool<CR>

" Paths for vimwiki files
let g:vimwiki_list =[{'path': "~/Google\ Drive/vimwiki", 'path_html': "~/Google\ Drive/vimwiki/export/html/"}]
